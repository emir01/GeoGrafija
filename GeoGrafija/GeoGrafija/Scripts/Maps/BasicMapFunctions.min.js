var geografija = function () { var a = function () { function b(a, b, c, d) { this.lat = a; this.lng = b; this.title = c; this.map = d; this.properMarker = null; this.getMarker = function () { var a = new google.maps.LatLng(this.lat, this.lng); if (!this.properMarker) { this.properMarker = new google.maps.Marker({ position: a, map: this.map, title: this.title, icon: "http://gmaps-samples.googlecode.com/svn/trunk/markers/red/blank.png" }) } else { this.properMarker.setPosition(a) } return this.properMarker }; this.setMap = function (a) { this.properMarker.setMap(a) }; this.showMe = function () { var a = ""; a += "Lat : " + this.lat + "\n"; a += "Lng : " + this.lng + "\n"; a += "Title: " + this.title; alert(a) }; this.setPosition = function (a, b) { var c; c = new google.maps.LatLng(a, b); this.properMarker.setPosition(c) }; this.getActual = function () { return this.properMarker }; this.getLatLng = function () { return new google.maps.LatLng(this.lat, this.lng) }; this.setIconString = function (a) { this.properMarker.setIcon(a) }; this.setIconImage = function (a) { } } function a(a, b, c) { if (!c) { c = new google.maps.Marker({ map: a, icon: "http://gmaps-samples.googlecode.com/svn/trunk/markers/red/blank.png" }) } c.setPosition(b); return c } return { addMarker: a, MyMarker: b} } (); var b = function () { function b(a, b) { google.maps.event.addListener(a, "click", b) } function a(a, b) { google.maps.event.addListener(a, "click", function (c) { b(a, c.latLng()) }) } return { AddClickEvent: a, AddMarkerClick: b} } (); var c = function () { function b(a, b) { var c = new Array; var d; for (var e = 0; e < b.length; e++) { d = b[e]; var f = new geografija.map.markers.MyMarker(d.geometry.location.lat(), d.geometry.location.lng(), d.address_components[0].short_name, a); c.push(f) } return c } function a(a, b) { var c; var d; d = { address: a }; c = new google.maps.Geocoder; c.geocode(d, function (a, c) { if (c == google.maps.GeocoderStatus.OK) { b(a, "OK") } if (c == google.maps.GeocoderStatus.ERROR) { b(a, "Error Contacting Google Server!") } if (c == google.maps.GeocoderStatus.OVER_QUERY_LIMIT) { b(a, "We are over the query limit for geocoding!") } if (c == google.maps.GeocoderStatus.REQUEST_DENIED) { b(a, "We are not allowed to use the geocoder.") } if (c == google.maps.GeocoderStatus.UNKNOWN_ERROR) { b(a, "A geocoding request could not be processed due to a server error. The request may succeed if we  try again.") } if (c == google.maps.GeocoderStatus.ZERO_RESULTS) { b(a, "NO RESULTS") } }) } return { getRaw: a, parseRaw: b} } (); var d = function () { function c(a, b) { var c = document.getElementById(a); var d; if (!c) { alert("There is no element with id : " + a); return null } d = new google.maps.Map(c, b); return d } function b(a) { var b = document.getElementById(a); var c; var d; if (!b) { alert("There is no element with id : " + a); return null } d = { mapTypeId: google.maps.MapTypeId.ROADMAP, center: new google.maps.LatLng(0, 0), zoom: 3 }; c = new google.maps.Map(b, d); return c } function a(a, b, c, d, e) { this.zoom = a; this.typeString = b; this.centerLat = c; this.centerLng = d; this.disableControls = e; this.showMe = function () { var a = ""; a += this.zoom + "\n"; a += this.typeString + "\n"; a += this.centerLat + "\n"; a += this.centerLng + "\n"; a += this.disableControls + "\n"; alert(a) }; this.getOptions = function () { var a; var b; var e; var f = this.zoom; if (c != null && d != null) { e = new google.maps.LatLng(c, d) } else { e = null } switch (this.typeString.toUpperCase()) { case "ROADMAP": b = google.maps.MapTypeId.ROADMAP; break; case "HYBRID": b = google.maps.MapTypeId.HYBRID; break; case "SATELLITE": b = google.maps.MapTypeId.SATELLITE; break; case "TERRAIN": b = google.maps.MapTypeId.TERRAIN; break } if (e != null) { a = { mapTypeId: b, center: e, zoom: f, disableDefaultUI: this.disableControls} } else { a = { mapTypeId: b, zoom: f, disableDefaultUI: this.disableControls} } return a } } return { CreateMap: c, CreateMapD: b, MyMapOptions: a} } (); var e = function () { function f(a, b) { var c; var d; var e = parseInt(b.zoom); var f = b.mapType; var g = b.lat; var h = b.lng; var i; if (b.controls == "True") { i = false } else { i = true } c = new geografija.map.create.MyMapOptions(e, f, g, h, i); d = c.getOptions(); a.setOptions(d); var j = new geografija.map.markers.MyMarker(g, h, b.name, a); j.getMarker(); if (b.icon) { j.setIconString("/Content/MarkerIcons/" + b.icon) } return j.getMarker() } function e() { var a; var b; var c; var d; var e; var f; var g; var h; var i; var j; var k; b = document.getElementById("Name").value; c = document.getElementById("Description").value; d = document.getElementById("Lat").value; e = document.getElementById("Lng").value; h = document.getElementById("Zoom").value; i = document.getElementById("MapType").value; var l = document.getElementById("RenderControls"); var m = document.getElementById("Icon"); if (l) { j = l.value } else { j = "True" } if (m) { k = m.value } else { k = null } a = new geografija.util.LocationDisplayOpts(b, c, d, e, h, i, j, k, f, g); return a } function d(a, b, c, d, e, f, g, h, i, j) { function k() { return new google.maps.LatLng(c, d) } this.name = a; this.description = b; this.lat = c; this.lng = d; this.zoom = e; this.mapType = f; this.controls = g; this.icon = h; this.typeName = i; this.typeDescription = j; } function c(a, b, c) { var d; d = document.getElementById(a); if (d) { d.value = Math.round(b * Math.pow(10, c)) / Math.pow(10, c) } else { alert("There is no element with id : " + a) } } function b(a, b) { var c; c = document.getElementById(a); if (c) { c.value = b } else { alert("There is no element with id : " + a) } } function a(a) { alert(a) } return { alert: a, changeVal: b, changeValR: c, LocationDisplayOpts: d, pullLocationDisplayOpts: e, setMap: f} } (); return { map: function () { return { markers: a, create: d, events: b, geocode: c} } (), util: e} } ()